/*
 * Copyright (c) 2022. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
 * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.
 * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.
 * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.
 * Vestibulum commodo. Ut rhoncus gravida arcu.
 */

package com.situ.tools;

import com.google.common.geometry.S2CellId;
import com.google.gson.JsonArray;
import com.situ.entity.bo.Point;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * @author 司徒彬
 * @date 2022/9/19 11:40
 */
@Slf4j
public class Test {

    private static final Integer LEVEL = 14;


    @org.junit.Test
    public void testGeohash() {
        List<String> list = ListUtils.newArrayList("wx4eqx", "wx4eqt", "wx4eqy", "wx4eqq", "wx4eqr", "wx4eqz", "wx4eqv", "wx4eqm", "wx4eqw");
        List<Point> points1 = GisUtils.toListPoint("[[113.556416,34.84386],[113.555419,34.844308],[113.554687,34.843597],[113.556151,34.843328],[113.555877,34.840592],[113.556754,34.839589],[113.556416,34.834001],[113.555418,34.834997],[113.552427,34.834657],[113.549437,34.835074],[113.54844,34.833168],[113.546031,34.833189],[113.545449,34.834559],[113.543455,34.832869],[113.542459,34.833754],[113.541915,34.830612],[113.542231,34.82961],[113.541669,34.828402],[113.535236,34.827873],[113.534365,34.827628],[113.53606,34.827202],[113.53594,34.826163],[113.531443,34.825687],[113.531028,34.824103],[113.530111,34.823635],[113.53108,34.823214],[113.531253,34.822631],[113.529632,34.821635],[113.530096,34.821228],[113.529991,34.820143],[113.52883,34.819959],[113.528507,34.821364],[113.527696,34.815447],[113.519446,34.814657],[113.52012,34.813654],[113.519793,34.811398],[113.517548,34.81107],[113.516527,34.811687],[113.515834,34.808381],[113.51416,34.808266],[113.513563,34.80987],[113.513152,34.808081],[113.511725,34.807673],[113.514409,34.806513],[113.514559,34.805978],[113.515184,34.807035],[113.516809,34.806916],[113.517546,34.803703],[113.518306,34.806891],[113.519724,34.806834],[113.520021,34.804645],[113.520535,34.804025],[113.521193,34.804641],[113.521356,34.806819],[113.523661,34.806773],[113.523569,34.804635],[113.524309,34.80363],[113.524126,34.80263],[113.523523,34.802064],[113.520957,34.801639],[113.523863,34.800971],[113.52452,34.798563],[113.525214,34.800928],[113.527707,34.800817],[113.527839,34.799616],[113.528783,34.798332],[113.525391,34.797621],[113.529759,34.796867],[113.529665,34.794606],[113.530497,34.793311],[113.532179,34.79391],[113.535732,34.793842],[113.535977,34.789584],[113.536475,34.788799],[113.53972,34.78883],[113.540461,34.785012],[113.541013,34.788015],[113.542454,34.788895],[113.544063,34.788562],[113.544018,34.782556],[113.544447,34.781812],[113.545172,34.784828],[113.546646,34.784758],[113.546794,34.782194],[113.544997,34.781553],[113.547437,34.781116],[113.548051,34.780545],[113.548434,34.77902],[113.54917,34.780805],[113.55258,34.780694],[113.552786,34.77653],[113.551884,34.775531],[113.552421,34.772024],[113.55274,34.774528],[113.553993,34.775527],[113.554043,34.780907],[113.559402,34.780898],[113.560398,34.779977],[113.562445,34.780465],[113.563391,34.78143],[113.564492,34.781514],[113.563391,34.781757],[113.563103,34.782228],[113.563392,34.787723],[113.563898,34.786027],[113.56439,34.78578],[113.566836,34.786062],[113.567382,34.787784],[113.568576,34.787711],[113.569378,34.78686],[113.570652,34.786786],[113.571373,34.783481],[113.571951,34.787508],[113.570104,34.788512],[113.570892,34.788995],[113.571157,34.790512],[113.571978,34.790906],[113.572372,34.791691],[113.572862,34.789],[113.575728,34.786501],[113.575055,34.78519],[113.576687,34.784823],[113.57836,34.783279],[113.580577,34.783271],[113.580572,34.784494],[113.57967,34.785808],[113.576844,34.788984],[113.574942,34.790081],[113.574936,34.792078],[113.573198,34.793513],[113.574239,34.794643],[113.577008,34.795865],[113.578199,34.79751],[113.578045,34.799195],[113.576267,34.799417],[113.576084,34.800234],[113.575276,34.800426],[113.5751,34.801251],[113.574285,34.801435],[113.574298,34.803592],[113.578125,34.803754],[113.578237,34.805518],[113.579091,34.805787],[113.57936,34.806663],[113.585352,34.806712],[113.586349,34.800897],[113.587348,34.806735],[113.590344,34.806794],[113.590898,34.806061],[113.592599,34.805763],[113.593342,34.804933],[113.595741,34.804905],[113.597337,34.803815],[113.597819,34.805021],[113.598517,34.805503],[113.595516,34.805682],[113.59434,34.806944],[113.592343,34.807476],[113.591344,34.808189],[113.569325,34.808479],[113.569324,34.809591],[113.571199,34.809709],[113.571316,34.810593],[113.572192,34.810714],[113.572283,34.811533],[113.572193,34.812352],[113.570378,34.812448],[113.569559,34.812359],[113.569296,34.811537],[113.569319,34.813601],[113.571178,34.813736],[113.571276,34.814538],[113.571178,34.81534],[113.569283,34.815541],[113.569158,34.819321],[113.568273,34.819548],[113.568384,34.821686],[113.56867,34.820835],[113.570585,34.820751],[113.570699,34.819865],[113.572549,34.819716],[113.572739,34.818904],[113.573501,34.818666],[113.573777,34.817943],[113.575516,34.817682],[113.575843,34.81701],[113.577542,34.816708],[113.578363,34.815818],[113.581635,34.815803],[113.582356,34.814174],[113.583961,34.814521],[113.583354,34.814666],[113.58283,34.815524],[113.584668,34.816208],[113.585352,34.817178],[113.58635,34.816385],[113.587209,34.816521],[113.586415,34.816587],[113.586419,34.81759],[113.585352,34.818853],[113.584811,34.818066],[113.583538,34.817709],[113.579361,34.817222],[113.578848,34.818017],[113.577209,34.818377],[113.576919,34.819087],[113.575236,34.819404],[113.574985,34.820154],[113.573198,34.820366],[113.573037,34.821206],[113.571005,34.821171],[113.570788,34.821955],[113.570058,34.822225],[113.569381,34.823408],[113.567302,34.823468],[113.567301,34.82464],[113.56812,34.824817],[113.568252,34.825554],[113.568268,34.829674],[113.572549,34.829725],[113.572375,34.82913],[113.570177,34.828757],[113.56996,34.827553],[113.570379,34.827132],[113.573374,34.826912],[113.574755,34.827161],[113.575211,34.829707],[113.577408,34.829587],[113.577946,34.828543],[113.577681,34.827542],[113.578364,34.826611],[113.578915,34.827989],[113.580594,34.82854],[113.579362,34.828812],[113.579072,34.829833],[113.581359,34.830135],[113.582357,34.8292],[113.58271,34.830187],[113.583455,34.830539],[113.578948,34.831128],[113.568384,34.831373],[113.568164,34.833563],[113.567386,34.834343],[113.56661,34.833565],[113.566389,34.831377],[113.564282,34.831455],[113.564194,34.833569],[113.563996,34.834171],[113.563397,34.834371],[113.562797,34.834173],[113.562599,34.833572],[113.562513,34.831456],[113.558409,34.831349],[113.55818,34.838816],[113.563123,34.839577],[113.558155,34.840331],[113.556935,34.841591],[113.556416,34.84386]]");

        List<String> list1 = GisUtils.splitPolygonToGeohash(points1);
        JsonArray collect = list1.stream()
                .map(str -> {
                    Point polygon = GisUtils.getGeoHashCenter(str);
                    JsonArray array = GisUtils.toJsonArray(GisUtils.toRectangleByGeohash(str));
                    return MapBuilders.newInstance().add("hash", str).add("border", array).add("center", polygon.toArray()).get();
                })
                .collect(Collectors.collectingAndThen(Collectors.toList(), DataSwitch::convertObjectToJsonArray));
        log.info("{}", collect);

    }

    @org.junit.Test
    public void testSplitToGeoHashThread() {
        try {
            String json = Files.readAllLines(Paths.get("/Users/erebus/Works/Workspaces/小工具/base_tools/gis_utils/src/main/java/com/situ/tools/border.json"))
                    .stream().collect(Collectors.joining());

            GisUtils.splitPolygonToGeohash(GisUtils.toListPoint(json), hash -> {
                log.info(hash);
                return true;
            });
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    @org.junit.Test
    public void testGeohashCallback() {
        List<Point> points = GisUtils.toListPoint("[[121.306389,31.265443],[121.305334,31.265413],[121.305299,31.2635],[121.304294,31.2635],[121.303182,31.262608],[121.30317,31.26062],[121.301978,31.260405],[121.302,31.252781],[121.300376,31.251883],[121.296037,31.251392],[121.301999,31.251021],[121.302181,31.2484],[121.301714,31.246398],[121.30308,31.2454],[121.302868,31.242911],[121.301674,31.242693],[121.301377,31.243838],[121.299374,31.243774],[121.298372,31.244728],[121.297158,31.244602],[121.296368,31.243661],[121.293364,31.243519],[121.293172,31.243193],[121.293363,31.24248],[121.293611,31.243138],[121.300375,31.243162],[121.301377,31.24192],[121.302379,31.242148],[121.302794,31.241813],[121.302664,31.240397],[121.304604,31.23762],[121.304617,31.233397],[121.303972,31.232805],[121.303489,31.231285],[121.302785,31.230987],[121.302507,31.229264],[121.301783,31.228984],[121.301584,31.22839],[121.301493,31.219267],[121.29975,31.219004],[121.299499,31.218255],[121.297767,31.21798],[121.297501,31.217244],[121.296366,31.21717],[121.295364,31.216166],[121.293785,31.215949],[121.293361,31.215157],[121.291734,31.214992],[121.291357,31.214292],[121.288805,31.213912],[121.288353,31.213135],[121.286036,31.21336],[121.285348,31.214494],[121.282345,31.214577],[121.281343,31.215369],[121.281131,31.214568],[121.27834,31.214545],[121.277339,31.213718],[121.27656,31.214351],[121.276237,31.215452],[121.276051,31.213351],[121.275337,31.2126],[121.274413,31.212349],[121.274274,31.211348],[121.274875,31.209348],[121.275835,31.208852],[121.275397,31.209348],[121.275817,31.20987],[121.276734,31.209953],[121.277635,31.209646],[121.277567,31.209122],[121.275838,31.208849],[121.275337,31.207992],[121.272678,31.208002],[121.270697,31.206979],[121.269331,31.206872],[121.26833,31.20584],[121.266329,31.205764],[121.265328,31.20472],[121.264328,31.204693],[121.261942,31.205956],[121.261636,31.20865],[121.259839,31.209854],[121.259821,31.211342],[121.258732,31.211748],[121.258521,31.212343],[121.258771,31.213343],[121.257621,31.213638],[121.25771,31.215344],[121.256538,31.215557],[121.256533,31.217552],[121.254786,31.218807],[121.25343,31.220452],[121.252498,31.22052],[121.252325,31.222145],[121.252293,31.220315],[121.25312,31.220143],[121.253242,31.219263],[121.253973,31.218993],[121.254197,31.218218],[121.25576,31.216779],[121.25593,31.215343],[121.256801,31.214344],[121.256793,31.213343],[121.258011,31.212027],[121.258326,31.210594],[121.259064,31.210079],[121.259157,31.209172],[121.260125,31.20814],[121.260232,31.20634],[121.26118,31.204193],[121.262638,31.20365],[121.262951,31.201962],[121.263624,31.201636],[121.263809,31.200337],[121.264796,31.199337],[121.264964,31.197974],[121.265661,31.197671],[121.265843,31.196336],[121.266671,31.195679],[121.267044,31.194051],[121.267836,31.193336],[121.267967,31.191973],[121.269654,31.190659],[121.270004,31.189009],[121.270834,31.188335],[121.270556,31.187334],[121.271688,31.186691],[121.271702,31.184963],[121.269607,31.185055],[121.268501,31.184159],[121.266781,31.183876],[121.266327,31.1831],[121.263467,31.183187],[121.263485,31.182169],[121.260786,31.181866],[121.260448,31.181204],[121.258831,31.18082],[121.258659,31.17999],[121.255322,31.180048],[121.254639,31.179008],[121.252007,31.17864],[121.251322,31.177776],[121.248321,31.178005],[121.245322,31.176641],[121.244322,31.176977],[121.242323,31.176591],[121.241324,31.176954],[121.240841,31.17581],[121.240323,31.175564],[121.239325,31.175936],[121.238115,31.175539],[121.236326,31.175903],[121.233328,31.175493],[121.232329,31.175853],[121.23133,31.175471],[121.230331,31.175827],[121.226334,31.175755],[121.226163,31.174509],[121.225256,31.174418],[121.216362,31.174364],[121.216347,31.175379],[121.215103,31.17535],[121.216284,31.175285],[121.216346,31.174282],[121.223338,31.174002],[121.224336,31.17427],[121.225336,31.173946],[121.226335,31.173933],[121.226494,31.175178],[121.227334,31.175252],[121.241323,31.174706],[121.241781,31.17587],[121.242323,31.176093],[121.247322,31.175654],[121.248321,31.177014],[121.252633,31.177013],[121.253321,31.177616],[121.255673,31.177974],[121.256322,31.178747],[121.258322,31.17859],[121.258904,31.179746],[121.261324,31.179579],[121.262325,31.180846],[121.265258,31.180396],[121.26535,31.181328],[121.267328,31.18156],[121.268328,31.182554],[121.270329,31.182552],[121.271476,31.183478],[121.272571,31.182094],[121.271036,31.181625],[121.2698,31.179859],[121.26829,31.179367],[121.268301,31.178329],[121.268342,31.178343],[121.268464,31.179194],[121.270329,31.179046],[121.272331,31.180828],[121.273332,31.180803],[121.273833,31.179834],[121.274503,31.179503],[121.275068,31.177597],[121.274792,31.176874],[121.274181,31.176483],[121.272237,31.17633],[121.272331,31.175911],[121.27241,31.176251],[121.275107,31.176106],[121.276335,31.176612],[121.276511,31.175155],[121.275792,31.173874],[121.273316,31.173329],[121.272782,31.172329],[121.274332,31.171935],[121.27669,31.171975],[121.276881,31.173332],[121.277336,31.173737],[121.278675,31.172333],[121.278337,31.171763],[121.276963,31.171702],[121.276334,31.170652],[121.274332,31.170377],[121.274166,31.169328],[121.275333,31.168712],[121.275841,31.169821],[121.277335,31.169963],[121.278336,31.170901],[121.279579,31.170574],[121.279337,31.167634],[121.279457,31.168211],[121.280338,31.168149],[121.280959,31.166952],[121.281636,31.16663],[121.281995,31.164988],[121.282853,31.164333],[121.282884,31.163333],[121.283757,31.162748],[121.284137,31.161128],[121.285038,31.160334],[121.285308,31.158332],[121.286841,31.156829],[121.288046,31.154335],[121.287545,31.153134],[121.28334,31.152887],[121.28234,31.151683],[121.277333,31.151517],[121.276332,31.150529],[121.271398,31.150386],[121.271135,31.149507],[121.265323,31.149316],[121.265323,31.148977],[121.265326,31.14931],[121.271327,31.149038],[121.271411,31.150233],[121.277333,31.149877],[121.278335,31.150848],[121.28356,31.151108],[121.284552,31.152119],[121.286345,31.15219],[121.287111,31.152098],[121.28785,31.151333],[121.29016,31.151145],[121.29035,31.149892],[121.290491,31.150194],[121.292215,31.150199],[121.292306,31.14929],[121.293232,31.149216],[121.293314,31.148297],[121.294267,31.148249],[121.294357,31.14711],[121.295295,31.147277],[121.295358,31.146359],[121.295382,31.14734],[121.294435,31.147418],[121.2944,31.148383],[121.293479,31.148463],[121.293415,31.149398],[121.2925,31.149484],[121.292411,31.150395],[121.291576,31.15056],[121.290281,31.152405],[121.294357,31.153157],[121.295359,31.152691],[121.295728,31.153976],[121.296361,31.154155],[121.297363,31.153669],[121.299366,31.153663],[121.300164,31.154556],[121.302372,31.154908],[121.303735,31.155997],[121.305608,31.156131],[121.30638,31.15686],[121.308383,31.156619],[121.309386,31.15787],[121.312392,31.157608],[121.313025,31.158743],[121.314397,31.158899],[121.315399,31.158575],[121.316009,31.158771],[121.3164,31.159569],[121.318567,31.159546],[121.318937,31.158915],[121.320639,31.158615],[121.321412,31.15776],[121.322718,31.157694],[121.323416,31.155674],[121.323611,31.156198],[121.32542,31.155828],[121.325744,31.157396],[121.325421,31.158246],[121.324419,31.157846],[121.323777,31.158753],[121.322414,31.158995],[121.321412,31.160042],[121.320214,31.160191],[121.322415,31.161878],[121.323416,31.160557],[121.325468,31.160445],[121.325462,31.158437],[121.326424,31.158561],[121.326756,31.15773],[121.327538,31.157511],[121.327771,31.155744],[121.328605,31.1554],[121.328786,31.153757],[121.330555,31.152525],[121.330814,31.150783],[121.331562,31.150531],[121.331855,31.148823],[121.332587,31.148254],[121.331434,31.147126],[121.330193,31.148162],[121.330016,31.149399],[121.328955,31.150398],[121.328722,31.151692],[121.328013,31.151985],[121.327566,31.153539],[121.326708,31.15368],[121.326423,31.154641],[121.32628,31.153395],[121.327103,31.152396],[121.32627,31.151547],[121.326146,31.15067],[121.325581,31.150393],[121.326423,31.150246],[121.326974,31.149395],[121.325492,31.14739],[121.326009,31.145979],[121.32677,31.145739],[121.326746,31.145068],[121.32542,31.144372],[121.324733,31.143072],[121.323157,31.14264],[121.322763,31.141033],[121.320683,31.139104],[121.319405,31.138768],[121.318404,31.137646],[121.316235,31.137532],[121.315946,31.13682],[121.314343,31.136418],[121.314314,31.135445],[121.31227,31.135361],[121.314395,31.135293],[121.314567,31.136193],[121.316517,31.136251],[121.316797,31.136973],[121.319406,31.137037],[121.319789,31.137994],[121.321697,31.138093],[121.32608,31.142731],[121.327425,31.142803],[121.328165,31.143654],[121.329429,31.14376],[121.330431,31.144716],[121.331756,31.142078],[121.330145,31.141682],[121.329832,31.140993],[121.328265,31.140553],[121.328083,31.139733],[121.3269,31.139389],[121.328426,31.139156],[121.328938,31.139882],[121.330431,31.139999],[121.331058,31.140772],[121.332436,31.140891],[121.333053,31.140401],[121.333437,31.138638],[121.33444,31.138581],[121.335216,31.139405],[121.333964,31.139927],[121.333927,31.141403],[121.333116,31.142081],[121.332827,31.143793],[121.33206,31.144402],[121.332242,31.145596],[121.334583,31.145549],[121.334797,31.144762],[121.335452,31.144408],[121.335892,31.142857],[121.336675,31.142409],[121.336734,31.140697],[121.337554,31.140517],[121.337889,31.13985],[121.338612,31.139574],[121.338952,31.137913],[121.341637,31.135597],[121.342145,31.134103],[121.343855,31.132812],[121.344669,31.131625],[121.34479,31.130418],[121.346697,31.128652],[121.347058,31.127013],[121.347852,31.126422],[121.347941,31.124948],[121.347467,31.124192],[121.349471,31.124422],[121.350176,31.123128],[121.351967,31.121918],[121.353152,31.120102],[121.353833,31.119783],[121.354064,31.118429],[121.354879,31.117827],[121.355198,31.11643],[121.356345,31.116292],[121.356171,31.114118],[121.356362,31.113431],[121.35719,31.113136],[121.357457,31.111432],[121.358488,31.111336],[121.358492,31.111434],[121.358483,31.111439],[121.357536,31.111481],[121.357727,31.114433],[121.356561,31.114508],[121.356485,31.117793],[121.355894,31.118433],[121.354638,31.118587],[121.354791,31.120741],[121.35262,31.122571],[121.351707,31.122658],[121.351682,31.124222],[121.352044,31.124429],[121.351196,31.125149],[121.351053,31.126428],[121.347242,31.130198],[121.345924,31.132881],[121.344091,31.134049],[121.342865,31.136825],[121.340287,31.139247],[121.340208,31.140415],[121.338319,31.142282],[121.338222,31.143413],[121.337069,31.14441],[121.337008,31.145974],[121.336233,31.14641],[121.337272,31.147588],[121.33845,31.147699],[121.339701,31.148665],[121.34093,31.14742],[121.340981,31.146419],[121.342053,31.145421],[121.342234,31.144196],[121.34346,31.143254],[121.343982,31.143423],[121.342759,31.146722],[121.342114,31.147078],[121.341651,31.148615],[121.34081,31.14942],[121.341975,31.150906],[121.343647,31.151242],[121.344463,31.152123],[121.345484,31.152413],[121.345465,31.15275],[121.343461,31.152813],[121.342837,31.152049],[121.341457,31.151953],[121.340736,31.15114],[121.340191,31.151157],[121.338902,31.152418],[121.339453,31.153161],[121.340415,31.153421],[121.337894,31.153862],[121.33493,31.158414],[121.335444,31.159055],[121.337448,31.159368],[121.339176,31.1607],[121.340884,31.160999],[121.341237,31.161647],[121.342931,31.161961],[121.343462,31.162694],[121.344008,31.160977],[121.344822,31.160434],[121.345058,31.159026],[121.345907,31.158435],[121.34585,31.15705],[121.344379,31.156514],[121.344308,31.155585],[121.343866,31.155429],[121.345466,31.155412],[121.346468,31.15602],[121.34747,31.1547],[121.349022,31.154438],[121.349208,31.155439],[121.348024,31.155991],[121.347888,31.156437],[121.348744,31.15744],[121.348481,31.158431],[121.349597,31.158442],[121.350619,31.159444],[121.349108,31.161076],[121.349154,31.162763],[121.35222,31.163189],[121.352481,31.162604],[121.353785,31.164753],[121.353803,31.165453],[121.352482,31.165141],[121.35148,31.165551],[121.350941,31.166449],[121.35148,31.167093],[121.352482,31.166795],[121.352961,31.167975],[121.354286,31.168456],[121.351479,31.168913],[121.351003,31.16945],[121.35117,31.17076],[121.352839,31.171455],[121.353532,31.172456],[121.352482,31.172721],[121.351847,31.173454],[121.352301,31.175636],[121.353848,31.175822],[121.354486,31.174005],[121.355488,31.173756],[121.355268,31.175461],[121.356174,31.176464],[121.354349,31.17746],[121.355153,31.177797],[121.355259,31.178692],[121.356201,31.179754],[121.357812,31.179786],[121.357918,31.177467],[121.35911,31.176468],[121.359158,31.174467],[121.359977,31.173948],[121.360498,31.172331],[121.361319,31.17229],[121.361499,31.171153],[121.36159,31.17247],[121.360621,31.172592],[121.360799,31.17447],[121.359837,31.174809],[121.359927,31.17747],[121.358897,31.17787],[121.358715,31.178468],[121.35886,31.18147],[121.360499,31.182384],[121.361494,31.182476],[121.360534,31.182508],[121.360788,31.184186],[121.362301,31.184277],[121.362502,31.183998],[121.363684,31.1843],[121.363906,31.18508],[121.36651,31.185331],[121.367512,31.186253],[121.369539,31.186466],[121.36955,31.187455],[121.370038,31.18749],[121.369498,31.187507],[121.369418,31.186587],[121.36651,31.186791],[121.366176,31.185817],[121.363504,31.18592],[121.36305,31.184933],[121.361501,31.184786],[121.360499,31.185955],[121.358069,31.187046],[121.357493,31.190764],[121.357345,31.18862],[121.355656,31.188634],[121.355489,31.189631],[121.354747,31.189726],[121.354518,31.190498],[121.353917,31.190466],[121.354385,31.190365],[121.354407,31.189385],[121.355243,31.189222],[121.355362,31.188341],[121.356127,31.188105],[121.356141,31.186119],[121.357875,31.18447],[121.356491,31.182832],[121.354487,31.183096],[121.353485,31.182132],[121.351256,31.182233],[121.350902,31.182879],[121.349787,31.183454],[121.350114,31.18382],[121.353485,31.184213],[121.353823,31.185126],[121.354678,31.185465],[121.353485,31.185638],[121.352483,31.184817],[121.350392,31.18537],[121.34989,31.187045],[121.350799,31.187459],[121.348969,31.187949],[121.348475,31.189049],[121.347637,31.187453],[121.347933,31.185993],[121.345133,31.184782],[121.339454,31.179118],[121.334443,31.179051],[121.331343,31.182326],[121.33328,31.183423],[121.332152,31.184135],[121.332126,31.184733],[121.333441,31.184659],[121.335178,31.185428],[121.334065,31.18605],[121.333688,31.187672],[121.330985,31.187971],[121.32967,31.189656],[121.329675,31.191178],[121.33244,31.191393],[121.33244,31.192425],[121.331838,31.192025],[121.329432,31.191939],[121.329097,31.19342],[121.328297,31.194419],[121.328716,31.196421],[121.328577,31.197568],[121.327934,31.198421],[121.328041,31.199811],[121.328896,31.200961],[121.329433,31.201204],[121.330435,31.20075],[121.330693,31.20117],[121.330644,31.204429],[121.330017,31.205428],[121.330235,31.209632],[121.331439,31.210674],[121.333443,31.210692],[121.334446,31.211704],[121.342464,31.211804],[121.343264,31.211254],[121.344226,31.211218],[121.345028,31.210019],[121.346807,31.209797],[121.347116,31.20882],[121.346711,31.208461],[121.348032,31.20802],[121.348476,31.206538],[121.349045,31.2089],[121.353118,31.209474],[121.349479,31.209934],[121.347474,31.21262],[121.34713,31.211809],[121.346472,31.211614],[121.343466,31.213095],[121.333444,31.213181],[121.332441,31.212109],[121.331272,31.212268],[121.332148,31.213436],[121.332442,31.216777],[121.335449,31.216835],[121.33645,31.217863],[121.341462,31.218039],[121.342465,31.219105],[121.344337,31.219462],[121.341462,31.21986],[121.34046,31.218958],[121.338455,31.218981],[121.337739,31.21945],[121.337504,31.2205],[121.33678,31.219119],[121.334691,31.2192],[121.333745,31.218141],[121.332208,31.218205],[121.332154,31.218725],[121.333445,31.220125],[121.334446,31.219793],[121.335131,31.222763],[121.342518,31.223461],[121.339458,31.223951],[121.336452,31.223864],[121.335449,31.224445],[121.334447,31.224049],[121.33144,31.224099],[121.329435,31.223649],[121.32881,31.224812],[121.327924,31.225434],[121.327432,31.227317],[121.326471,31.22739],[121.326762,31.225098],[121.325427,31.223723],[121.324424,31.223801],[121.32365,31.222197],[121.322184,31.222187],[121.320414,31.223117],[121.32021,31.222418],[121.31881,31.222018],[121.318247,31.221414],[121.315681,31.221134],[121.315404,31.220284],[121.313399,31.220108],[121.312397,31.219188],[121.311177,31.219185],[121.308973,31.220981],[121.308199,31.223398],[121.308023,31.220397],[121.308767,31.219775],[121.308759,31.219027],[121.306384,31.218699],[121.305595,31.218179],[121.304553,31.21839],[121.303738,31.219389],[121.305706,31.220393],[121.304028,31.221038],[121.303225,31.222236],[121.303379,31.222971],[121.306884,31.223397],[121.303379,31.223809],[121.303187,31.22439],[121.303176,31.227392],[121.303957,31.227818],[121.304237,31.229539],[121.304806,31.229973],[121.305298,31.231484],[121.305972,31.231812],[121.306159,31.2354],[121.307124,31.236403],[121.307342,31.238357],[121.306386,31.238495],[121.305768,31.240402],[121.306387,31.241006],[121.310019,31.241409],[121.306387,31.2418],[121.305667,31.242403],[121.305611,31.243177],[121.306158,31.243404],[121.305528,31.243547],[121.305102,31.242402],[121.304169,31.242187],[121.304023,31.248403],[121.305386,31.249845],[121.316177,31.250424],[121.305386,31.250889],[121.302944,31.252966],[121.30268,31.259406],[121.303754,31.260408],[121.304565,31.26323],[121.305432,31.263367],[121.305416,31.265384],[121.306388,31.265413],[121.306389,31.265443]]");

        List<String> list = new ArrayList<>();
        GisUtils.splitPolygonToGeohash(points, (hash) -> {
            log.info(hash);
            list.add(hash);
            return true;
        }, false);
        JsonArray collect = list.stream()
                .map(str -> {
                    Point polygon = GisUtils.getGeoHashCenter(str);
                    JsonArray array = GisUtils.toJsonArray(GisUtils.toRectangleByGeohash(str));
                    return MapBuilders.newInstance().add("hash", str).add("border", array).add("center", polygon.toArray()).get();
                })
                .collect(Collectors.collectingAndThen(Collectors.toList(), DataSwitch::convertObjectToJsonArray));
        log.info("{}", collect);
    }


    @org.junit.Test
    public void testGoogleS2() {
        /**
         addressLng	addressLat
         lng	lat
         Point.get( 116.328138,	40.254076),
         Point.get( 116.327940,	40.253877),
         Point.get( 116.327991,	40.254118),
         Point.get( 116.328147,	40.254134),
         Point.get( 116.328068,	40.254211),
         Point.get(  116.328473,	40.256354),
         Point.get(  116.328210	,40.256179),
         Point.get(  116.328499	4,0.257591)


         11:46:45.250 [main] INFO com.situ.tools.Test - 5857922920264761344
         11:46:45.254 [main] INFO com.situ.tools.Test - 5857923538740051968
         11:46:45.254 [main] INFO com.situ.tools.Test - 5857917663224791040
         11:46:45.254 [main] INFO com.situ.tools.Test - 5858220132001644544
         11:46:45.254 [main] INFO com.situ.tools.Test - 5857917491426099200
         11:46:45.254 [main] INFO com.situ.tools.Test - 5857923538740051968
         11:46:45.255 [main] INFO com.situ.tools.Test - 5858204292162256896
         11:46:45.255 [main] INFO com.situ.tools.Test - 5857917766304006144
         11:46:45.255 [main] INFO com.situ.tools.Test - 5857923916697174016
         11:46:45.255 [main] INFO com.situ.tools.Test - 5857923744898482176
         */

        List<Point> points = ListUtils.newArrayList(
                Point.get(116.328138, 40.254076),
                Point.get(116.327940, 40.253877),
                Point.get(116.327991, 40.254118),
                Point.get(116.328147, 40.254134),
                Point.get(116.328068, 40.254211),
                Point.get(116.328473, 40.256354),
                Point.get(116.328210, 40.256179),
                Point.get(116.328499, 40.257591)
        );


        String p = "[[116.327373,40.258138],[116.344039,40.258138],[116.344037,40.245420],[116.327375,40.245420]]";

        List<S2CellId> list = GoogleS2.childrenCellId(GisUtils.toListPoint(p), 13);

        for (S2CellId item : list) {

            log.info("{}-{}-{}", item.toToken(), item.childBegin(LEVEL).id(), item.childEnd(LEVEL).id());
        }
        String collect1 = list.stream()//.filter(item -> cap.contains(item.toPoint()))

                .map(S2CellId::toToken)
                .collect(Collectors.joining(","));
        log.info(collect1);


    }

    @org.junit.Test
    public void test() {
        List<String> list = new ArrayList<>();
        splitPolygonToGeohash(new ArrayList<>(), (Function<String, Boolean>) list::add);
        splitPolygonToGeohash(new ArrayList<>(), (hash, point) -> {
            log.info(hash + point);
            return true;
        });

        log.info(DataSwitch.convertObjectToJsonArray(list).toString());
    }

    public static void splitPolygonToGeohash(List<Point> polygon, Function<String, Boolean> callback) {

        log.info("{}", callback.getClass().getGenericInterfaces().length);
        callback.apply("ssssss");
    }


    public static void splitPolygonToGeohash(List<Point> polygon, BiFunction<String, Point, Boolean> callback) {
        log.info("{}", callback.getClass().getConstructors().length);
        callback.apply("ssss", Point.get(1, 2));
    }


}
